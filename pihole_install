#!/bin/bash

# Verificar se é root
if [ "$(id -u)" -ne 0 ]; then
    echo "Este script deve ser executado como root. Use 'sudo -i' e execute novamente."
    exit 1
fi

# Função para corrigir problemas de repositórios
fix_repositories() {
    echo "Corrigindo problemas de repositórios e DNS..."
    
    # Parar serviços que podem interferir
    systemctl stop systemd-resolved
    
    # Configurar DNS público
    echo "nameserver 8.8.8.8" > /etc/resolv.conf
    echo "nameserver 1.1.1.1" >> /etc/resolv.conf
    
    # Substituir mirrors padrão por alternativos
    sed -i 's|http://.*archive.ubuntu.com|http://mirror.rackspace.com/ubuntu|g' /etc/apt/sources.list
    sed -i 's|http://.*security.ubuntu.com|http://mirror.rackspace.com/ubuntu|g' /etc/apt/sources.list
    
    # Limpar cache e atualizar
    apt clean
    apt update --fix-missing
    
    # Verificar se a correção funcionou
    if apt update 2>&1 | grep -q "Failed"; then
        echo "Erro: Não foi possível corrigir os repositórios. Verifique sua conexão de rede."
        exit 1
    fi
}

# Atualizar o sistema com tratamento de erros
update_system() {
    echo "Atualizando o sistema..."
    if ! apt update -y && apt upgrade -y; then
        echo "Erro durante a atualização do sistema. Tentando corrigir..."
        fix_repositories
        apt update -y && apt upgrade -y
    fi
}

# Instalar Pi-hole com fallback
install_pihole() {
    echo "Instalando Pi-hole..."
    if ! curl -sSL https://install.pi-hole.net | bash; then
        echo "Erro na instalação automática do Pi-hole. Tentando método alternativo..."
        apt install -y git
        git clone --depth 1 https://github.com/pi-hole/pi-hole.git Pi-hole
        cd Pi-hole/automated\ install/
        bash basic-install.sh
        cd ../..
    fi
}

# Instalar WireGuard
install_wireguard() {
    echo "Instalando WireGuard..."
    apt install -y wireguard resolvconf qrencode
    
    # Configurar WireGuard
    cd /etc/wireguard
    umask 077
    wg genkey | tee privatekey | wg pubkey > publickey
    
    SERVER_IP=$(curl -4 ifconfig.co)
    SERVER_PRIVKEY=$(cat privatekey)
    
    cat > wg0.conf <<EOF
[Interface]
Address = 10.8.0.1/24
ListenPort = 51820
PrivateKey = $SERVER_PRIVKEY
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o ens3 -j MASQUERADE
SaveConfig = true
EOF

    echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
    sysctl -p
    
    systemctl enable --now wg-quick@wg0
    
    # Criar configuração do cliente
    CLIENT_PRIVKEY=$(wg genkey)
    CLIENT_PUBKEY=$(echo $CLIENT_PRIVKEY | wg pubkey)
    
    cat > client.conf <<EOF
[Interface]
PrivateKey = $CLIENT_PRIVKEY
Address = 10.8.0.2/24
DNS = 10.8.0.1

[Peer]
PublicKey = $(cat publickey)
Endpoint = $SERVER_IP:51820
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25
EOF

    wg set wg0 peer $CLIENT_PUBKEY allowed-ips 10.8.0.2/32
}

# Configurar firewall
setup_firewall() {
    echo "Configurando firewall..."
    ufw allow ssh
    ufw allow 53/udp
    ufw allow 51820/udp
    ufw --force enable
}

# Main execution
update_system
setup_firewall
install_pihole
install_wireguard

# Mostrar informações finais
echo "---------------------------------------------"
echo "Instalação concluída com sucesso!"
echo ""
echo "Pi-hole:"
echo "  - Acesse o painel em: http://$(hostname -I | awk '{print $1}')/admin"
echo "  - Defina sua senha com: pihole -a -p"
echo ""
echo "WireGuard:"
echo "  - Configuração do cliente em: /etc/wireguard/client.conf"
echo "  - QR Code para conexão móvel:"
qrencode -t ansiutf8 < /etc/wireguard/client.conf
echo "---------------------------------------------"
